// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transform should add a Trans macro around translatable text 1`] = `
"import React, { FC } from 'react';
import { useWorkspacesQuery } from '../../../graphql/gqlPrivateSchema';
import Loader from '../../common/page/loader/Loader';
import { PageContentWrapper } from '../../common/page/Page';
// import WorkspaceCard from '../../../pages/dashboard-page/workspace-card/WorkspaceCard'
// import CardGrid from '../../common/card-grid/CardGrid'
import './YourWorkspaces.less';
import { Trans } from '@lingui/macro';
export const YourWorkspaces: FC = () => {
  const {
    data,
    loading
  } = useWorkspacesQuery();
  if (loading) {
    return <Loader />;
  }
  if (!data || data?.workspaces.length === 0) {
    return null;
  }
  const a = 2;
  return <PageContentWrapper className="YourWorkspaces">
      <div className="grid-header">
        <h3><Trans>Your workspaces {a}</Trans></h3>
      </div>

      <div><Trans>
        Read the <a href="https://lingui.js.org">documentation</a>
        for more info.
      </Trans></div>
    </PageContentWrapper>;
};"
`;

exports[`transform should just add one 1`] = `
"import React, { FC } from 'react';
import { Trans } from '@lingui/macro';
const limitDefaults = [5, 6, 6, 8];
export const RecentlyViewedTopics: FC = () => {
  const limit = getValueForScreenSize(limitDefaults);
  const {
    data
  } = useRecentlyUpdatedTopicEnrolmentsQuery({
    variables: {
      limit: limit ?? 6
    }
  });
  if (!data) {
    return <Loader />;
  }
  const {
    recentlyUpdatedTopicEnrolments
  } = data?.me;
  if (recentlyUpdatedTopicEnrolments?.length === 0) {
    return null;
  }
  return <PageContentWrapper className="RecentlyViewed">
      <div className="grid-header">
        <h3><Trans>Recently viewed</Trans></h3>
      </div>

      <CardGrid cards={recentlyUpdatedTopicEnrolments.map((enrolment, idx) => {
      const {
        topicVersion
      } = enrolment;
      let image: string | null | undefined = null;
      let imageVariants;
      if (topicVersion && topicVersion.backgroundImage) {
        const {
          backgroundImage
        } = topicVersion;
        imageVariants = backgroundImage.imageVariants;
        const resizedImage = backgroundImage.imageVariants.find(imageVariant => imageVariant.size_key === '300x200');
        image = resizedImage ? resizedImage.cdnUrl : backgroundImage.cdnUrl;
      }
      return <ResourceCard key={idx} image={image} imageSrcSet={resourceCardCoverImageSrcSet(imageVariants)}
      // @ts-expect-error
      enrolment={enrolment} topicId={enrolment.topic.id} title={enrolment.topicVersion?.title} description={enrolment.topicVersion?.summary} author={enrolment.topic.author} readDurationMins={enrolment.topicVersion?.readDurationMins} />;
    })} />
    </PageContentWrapper>;
};"
`;

exports[`transform should not add anything 1`] = `
"import React, { FC } from 'react';
import { useWorkspacesQuery } from '../../../graphql/gqlPrivateSchema';
import Loader from '../../common/page/loader/Loader';
import { PageContentWrapper } from '../../common/page/Page';
import './YourWorkspaces.less';
export const YourWorkspaces: FC = () => {
  const {
    data,
    loading
  } = useWorkspacesQuery();
  if (loading) {
    return <Loader />;
  }
  if (!data || data?.workspaces.length === 0) {
    return null;
  }
  return <PageContentWrapper className="YourWorkspaces">
      <div className="grid-header"></div>
    </PageContentWrapper>;
};"
`;
